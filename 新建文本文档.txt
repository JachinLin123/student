
//创建图书数据库
CREATE DATABASE `books` CHARACTER SET 'utf8' COLLATE 'utf8_bin'

//创建图书表
CREATE TABLE `books`.`Book`  (
  `Booknumber` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Bookname` varchar(255) NOT NULL,
  `Author` varchar(255) NOT NULL,
  `Adress` varchar(255) NOT NULL,
  `PubYear` int(255) NOT NULL,
  `Price` float(10, 2) NOT NULL,
  `State` varchar(255) NOT NULL,
  `Quality` tinyint(255) NULL,
  PRIMARY KEY (`Booknumber`)
);
//创建读者表
CREATE TABLE `books`.`Reader`  (
  `BorrowNo` tinyint(255) NOT NULL,
  `Type` varchar(255) NOT NULL,
  `HasBorrow` tinyint(255) NULL,
  `AtmostBorrow` tinyint(255) NULL,
  `Name` varchar(255) NOT NULL,
  `Department` varchar(255) NOT NULL,
  `Password` tinyint(255) NULL,
  PRIMARY KEY (`BorrowNo`)
);


//创建借阅表
CREATE TABLE `books`.`Borrow`  (
  `BorrowNo` int(0) NOT NULL,
  `BookNo` varchar(255) NOT NULL,
  `BorrowDate` int(255) NOT NULL,
  `ReturnDate` int(255) NOT NULL,
  PRIMARY KEY (`BookNo`)
);






//第五题的全部操作

CREATE DATABASE `schoolInfo` CHARACTER SET 'utf8' COLLATE 'utf8_bin';

CREATE TABLE  teacherInfo (
id INT  NOT NULL  UNIQUE  PRIMARY KEY AUTO_INCREMENT,
NAME VARCHAR(20) ,
Sex CHAR(1) ,
Birthday DATE,
Address VARCHAR(50)
);
DESCRIBE teacherInfo;
ALTER TABLE  teacherInfo MODIFY name VARCHAR(30) NOT NULL;
ALTER TABLE teacherInfo MODIFY birthday DATETIME AFTER name;
ALTER TABLE teacherInfo CHANGE id t_id INT(10) NOT NULL; 
ALTER TABLE  teacherInfo DROP address;
ALTER TABLE  teacherInfo  ADD wages FLOAT;
ALTER TABLE  teacherInfo RENAME teacherInfo_Info;
ALTER TABLE  teacherInfo_info ENGINE=MYISAM;
DESCRIBE teacherInfo_info;











idea快捷键
sout输出
fori语句
iter
itli





IntelliJ Idea 常用快捷键列表

Alt+回车 导入包,自动修正
Ctrl+N  查找类
Ctrl+Shift+N 查找文件
Ctrl+Alt+L  格式化代码
Ctrl+Alt+O 优化导入的类和包
Alt+Insert 生成代码(如get,set方法,构造函数等)
Ctrl+E或者Alt+Shift+C  最近更改的代码
Ctrl+R 替换文本
Ctrl+F 查找文本
Ctrl+Shift+Space 自动补全代码
Ctrl+空格 代码提示
Ctrl+Alt+Space 类名或接口名提示
Ctrl+P 方法参数提示
Ctrl+Shift+Alt+N 查找类中的方法或变量
Alt+Shift+C 对比最近修改的代码
 
Shift+F6  重构-重命名
Ctrl+Shift+先上键
Ctrl+X 删除行
Ctrl+D 复制行
Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/*...*/ ）
Ctrl+J  自动代码
Ctrl+E 最近打开的文件
Ctrl+H 显示类结构图
Ctrl+Q 显示注释文档
Alt+F1 查找代码所在位置
Alt+1 快速打开或隐藏工程面板
Ctrl+Alt+ left/right 返回至上次浏览的位置
Alt+ left/right 切换代码视图
Alt+ Up/Down 在方法间快速移动定位
Ctrl+Shift+Up/Down 代码向上/下移动。
F2 或Shift+F2 高亮错误或警告快速定位
 
代码标签输入完成后，按Tab，生成代码。
选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。
Ctrl+W 选中代码，连续按会有其他效果
选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。
Ctrl+Up/Down 光标跳转到第一行或最后一行下
Ctrl+B 快速打开光标处的类或方法


最常用快捷键
1.Ctrl＋E，可以显示最近编辑的文件列表
2.Shift＋Click可以关闭文件
3.Ctrl＋[或]可以跳到大括号的开头结尾
4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方
5.Ctrl＋F12，可以显示当前文件的结构
6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择
7.Ctrl＋N，可以快速打开类
8.Ctrl＋Shift＋N，可以快速打开文件
9.Alt＋Q可以看到当前方法的声明
10.Ctrl＋W可以选择单词继而语句继而行继而函数
11.Alt＋F1可以将正在编辑的元素在各个面板中定位
12.Ctrl＋P，可以显示参数信息
13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入
14.Alt＋Insert可以生成构造器/Getter/Setter等
15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量
16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch
17.Alt＋Up and Alt＋Down可在方法间快速移动
下面的不是很有用
18.在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”
19.Ctrl＋Shift＋Alt＋N可以快速打开符号
20.Ctrl＋Shift＋Space在很多时候都能够给出Smart提示
21.Alt＋F3可以快速寻找
22.Ctrl＋/和Ctrl＋Shift＋/可以注释代码
23.Ctrl＋Alt＋B可以跳转到抽象方法的实现
24.Ctrl＋O可以选择父类的方法进行重写
25.Ctrl＋Q可以看JavaDoc
26.Ctrl＋Alt＋Space是类名自动完成
27.快速打开类/文件/符号时，可以使用通配符，也可以使用缩写
28.Live Templates! Ctrl＋J
29.Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用
30.Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果
31.Ctrl＋Shift＋J可以整合两行
32.Alt＋F8是计算变量值






五、pycharm的快捷键

为了提高编写代码的速度，以及方面程度，
需要知道一些常用的快捷键。

最常用的是：

1.ctrl+c ? 复制

? ?
 ? ? ?2.ctrl+d ?快速复制上行的内容至下一行

? ? ? ? 
?3.Ctrl+shift+n ? ?通过文件名快速查找工程内的文件

? ? 
? ? ? 4.ctrl +a ? ? ? 全选

? 
?5.Ctrl+alt+l ? 调整代码格式

? ? ? 
? ?6.Alt+enter ?导入模块

? ? ? ? 
?7.Ctrl+z ? 回退

? ? 
? ? ?8. ctrl+x ?剪贴


?9. ctrl+/ ? ?注释，去注释

? ? ? ? 
?10.shift +Tab ?往移动

? ? ? ? 
11.shift +enter ?自动回车，跳入下一行

? ? ? ?
 ?12.ctrl +enter ?自动回车，跳入上一行

? ? ? 
?更多的快捷键请见：https://segmentfault.com/a/1190000005776418

?









VSCODE

F1 或 Ctrl+Shift+P : 打开命令面板。在打开的输入框内，可以输入任何命令，例如：

按一下 Backspace 会进入到 Ctrl+P 模式
在 Ctrl+P 下输入 > 可以进入 Ctrl+Shift+P 模式
在 Ctrl+P 窗口下还可以:
-直接输入文件名，跳转到文件
? 列出当前可执行的动作
! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M
: 跳转到行数，也可以 Ctrl+G 直接进入
@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入
@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入
# 根据名字查找 symbol，也可以 Ctrl+T
常用快捷键

编辑器与窗口管理

打开一个新窗口： Ctrl+Shift+N
关闭窗口： Ctrl+Shift+W
同时打开多个编辑器（查看多个文件）
新建文件 Ctrl+N
文件之间切换 Ctrl+Tab
切出一个新的编辑器（最多 3 个） Ctrl+\，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名
左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3
3 个编辑器之间循环切换 Ctrl+
编辑器换位置， Ctrl+k然后按 Left或 Right
代码编辑

格式调整

代码行缩进: Ctrl+[ 、 Ctrl+]
Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容
代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code
上下移动一行： Alt+Up 或 Alt+Down
向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down
在当前行下边插入一行: Ctrl+Enter
在当前行上方插入一行 Ctrl+Shift+Enter
光标相关

移动到行首： Home
移动到行尾： End
移动到文件结尾： Ctrl+End
移动到文件开头： Ctrl+Home
移动到定义处： F12
定义处缩略图：只看一眼而不跳转过去 Alt+F12
移动到后半个括号： Ctrl+Shift+]
选择从光标到行尾： Shift+End
选择从行首到光标处： Shift+Home
删除光标右侧的所有字： Ctrl+Delete
扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right
多行编辑(列编辑)：Alt+Shift+鼠标左键， Ctrl+Alt+Down/Up
同时选中所有匹配： Ctrl+Shift+L
Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)
回退上一个光标操作： Ctrl+U
选中所有匹配词批量编辑：鼠标高亮选中需要查找的词，按下 Ctrl + Shift + L键，即可快速选中当前文件中所有匹配的词，并在每一个词后面有一个编辑光标，可批量同步编辑
重构代码

找到所有的引用： Shift+F12
同时修改本文件中所有匹配的： Ctrl+F12
重命名：比如要修改一个方法名，可以选中后按 F2，输入新名字，回车，则所有该方法的引用也都同步更新了
跳转到下一个 Error 或 Warning：当有多个错误时可以按 F8 逐个跳转
查看 diff： 在 explorer 里选择文件右键 Set file tocompare，然后需要对比的文件上右键选择 Compare with file_name_you_chose
查找替换

查找 Ctrl+F
查找替换 Ctrl+H
整个文件夹中查找 Ctrl+Shift+F
显示相关

全屏：F11
zoomIn/zoomOut：Ctrl +/-
侧边栏显/隐： Ctrl+B
显示资源管理器 Ctrl+Shift+E
显示搜索 Ctrl+Shift+F
显示 Git Ctrl+Shift+G
显示 Debug Ctrl+Shift+D
显示 Output Ctrl+Shift+U
其他

自动保存：File -> AutoSave，或者 Ctrl+Shift+P，输入 auto








git init

$ git config --global user.name "your name"
$ git config --global user.email "your_email@youremail.com"

$ git remote add origin git@github.com:yourName/yourRepo.git
$ git add README
 
$ git commit -m "first commit"

$ git push origin master

//git status  查看当前状态

提交代码第二步：git add . 

提交代码第三步：git commit -m "修复XXbug"   推送修改到本地git库中

$ git config --global user.name "your name"
$ git config --global user.email "your_email@youremail.com"

git remote rm origin
git remote add origin [url]



1、git pull origin master --allow-unrelated-histories //把远程仓库和本地同步，消除差异

2、重新add和commit相应文件

3、git push origin master

4、此时就能够上传成功了

git fetch origin

git merge origin/master

git push origin master

        
